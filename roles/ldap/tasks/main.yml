## Install and configure slapd.
---
- name: Check if domain name is available
  ansible.builtin.fail:
    msg: "The machine's domain must not be empty."
  when: ansible_domain | length == 0

- name: Check if slapd is already set up
  ansible.builtin.stat:
    path: /usr/sbin/slapd
  register: slapd

- name: Install and configure slapd
  ansible.builtin.include_tasks: setup.yml
  when: not slapd.stat.exists

#######################################################################################
## Use the admin password saved to file (available also after installation):
- name: Slurp admin password
  ansible.builtin.slurp:
    src: "{{ ldap_admin_pwd_file }}"
  register: ldap_admin_pwd
  no_log: true

## Prepare user directories
- name: Make sure we have a people entry for users
  community.general.ldap_entry:
    dn: "ou=people,{{ basedn }}"
    objectClass: organizationalUnit
    bind_dn: "cn=admin,{{ basedn }}"
    bind_pw: "{{ ldap_admin_pwd['content'] | b64decode | replace('\n', '') }}"

- name: Make sure we have a group entry for users
  community.general.ldap_entry:
    dn: "ou=groups,{{ basedn }}"
    objectClass: organizationalUnit
    bind_dn: "cn=admin,{{ basedn }}"
    bind_pw: "{{ ldap_admin_pwd['content'] | b64decode | replace('\n', '') }}"


- name: Add group for ldap users
  community.general.ldap_entry:
    dn: "cn=ldapuser,ou=groups,{{ basedn }}"
    objectClass:
      - posixGroup
    attributes:
      gidNumber: "{{ ldapuser_gid }}"
    bind_dn: "cn=admin,{{ basedn }}"
    bind_pw: "{{ ldap_admin_pwd['content'] | b64decode | replace('\n', '') }}"


- name: Provide simple script to manage ldap/kdc
  ansible.builtin.template:
    src: debian-lan.j2
    dest: /usr/local/sbin/debian-lan
    mode: "0744"

- block:
  - name: Allow ldap service in firewalld
    ansible.posix.firewalld:
      zone: internal
      service: ldap
      permanent: true
      immediate: true
      state: enabled
  - name: Add interface to internal zone
    ansible.posix.firewalld:
      zone: internal
      interface: "{{ internal_if }}"
      permanent: true
      immediate: true
      state: enabled
  when: not run_in_installer|default(false)|bool

- name: Allow ldap service in firewalld and add interface to zone
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
    - firewall-offline-cmd --zone=internal --add-service=ldap
    - firewall-offline-cmd --zone=internal --add-interface={{ internal_if }}
  when: run_in_installer|default(false)|bool

- name: Add dummy user foo
  community.general.ldap_entry:
    dn: "uid=foo,ou=people,{{ basedn }}"
    objectClass:
      - inetOrgPerson
      - posixAccount
    attributes:
      cn: foo
      sn: bar
      userPassword: "{{ foo_pwd }}"
      uidNumber: "{{ min_id }}"
      gidNumber: "{{ min_id }}"
      homeDirectory: "{{ lan_homes }}/foo"
      loginShell: /bin/bash
    bind_dn: "cn=admin,{{ basedn }}"
    bind_pw: "{{ ldap_admin_pwd['content'] | b64decode | replace('\n', '') }}"
  when: foo_pwd is defined and foo_pwd | length > 0

- name: Add dummy group foo
  community.general.ldap_entry:
    dn: "cn=foo,ou=groups,{{ basedn }}"
    objectClass:
      - posixGroup
    attributes:
      gidNumber: "{{ min_id }}"
    bind_dn: "cn=admin,{{ basedn }}"
    bind_pw: "{{ ldap_admin_pwd['content'] | b64decode | replace('\n', '') }}"
  when: foo_pwd is defined and foo_pwd | length > 0
